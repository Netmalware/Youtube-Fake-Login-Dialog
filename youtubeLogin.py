# This is an educational project made to improve knowledge #

### GPL License ###

'''
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
'''

### MIT License ###

'''
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
__author__ = "Kevin Moreira"
__license__ = "GPL"

# Google LLC. All Rights Reserved.
# Program developed by Kevin Moreira #

# Libraries present in this project #

import os
import sys
import time
from password_strength import PasswordPolicy
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtWidgets import QDialog, QApplication
from PyQt5.QtCore import QTimer, Qt, QUrl
from PyQt5.QtGui import QIcon, QPixmap, QDesktopServices
from PyQt5.uic import loadUi

import images # Librarie generated by PyQt Pyrcc5 file

# Class instance to initiate the process #

class YoutubeLogin(QDialog):
    def __init__(self):
        super().__init__()
        loadUi("youtubeLogin.ui", self) # runs the "login.ui" file where there is the GUI concept
        self.setWindowTitle("Youtube Â©") # put title in Dialog window
        self.errorLabel.hide() # Hide the object "QLabel" presents in GUI
        self.progressBar.hide() # hide the object "QProgressBar" presents in GUI
        self.progressBar.setValue(0) # starts progressBar value in 0
        self.progressBar.hide() # hide the object "QProgressBar" presents in GUI
        self.show() # show the application

        self.open_eye_icon = QIcon("opennedEyeIcon.png") # defines what is "open_eye_icon"
        self.closed_eye_icon = QIcon("closedEyeIcon.png") # defines what is "closed_eye_icon"

        self.revealPasswordButton.clicked.connect(self.toggle_password_visibility) # connect the button "revealPasswordButton" with the function "toggle_password_visibility"
        self.LogButton.clicked.connect(self.validate_credentials) # connect the button "LogButton" with the function "validate_credentials"

        self.youtubeButton.clicked.connect(self.openYouTube) # connect the button "youtubeButton" with the function "openYoutube"
        self.createAccountButton.clicked.connect(self.openYouTubeLoginPage) # connect the button "createAccountButton" with the function "openYoutubeLoginPage"

        ### create the function "toggle_password_visibility" where when the user clicks in button "revealPasswordButton", the QLineEdit "passwordLineEdit" change the echoMode ###

    def toggle_password_visibility(self): 
        if self.revealPasswordButton.isChecked():
            self.passwordLineEdit.setEchoMode(self.passwordLineEdit.Normal)
            self.revealPasswordButton.setIcon(self.open_eye_icon)
        else:
            self.passwordLineEdit.setEchoMode(self.passwordLineEdit.Password)
            self.revealPasswordButton.setIcon(self.closed_eye_icon)

        button_size = self.revealPasswordButton.size()
        self.revealPasswordButton.setIconSize(button_size)

        ### create the function "validate_credentials" where the application system core verify if the pyped data is valid or not ###

    def validate_credentials(self):
        email = self.emailLineEdit.text()
        senha = self.passwordLineEdit.text()

        if not email or not senha:
            self.errorLabel.show()
            self.errorLabel.setText("Fill in all the requested fields!")
            return

        if self.is_valid_email(email) and self.is_strong_password(senha):
            self.show_progress_bar()
        else:
            self.errorLabel.show()
            self.errorLabel.setText("The provided data is not valid!")

        ### create the function "is_valid_email" where checks if the provided Email is valid or not ###

    def is_valid_email(self, email):
        return "@" in email and "." in email
    
        ### create the function "is_strong_password" where checks if the provided Password is valid or not, but consulting one specialized librarie for estipulate if the password is sufficient strong ### 

    def is_strong_password(self, senha):
        policy = PasswordPolicy.from_names(
            length=8,
            uppercase=1,
            numbers=1,
            special=1,
            nonletters=1,
        )
        return bool(policy.test(senha))
    
        ### create the function "show_progress_bar" where runs the prorgessBar start point value connected with "update_progress_bar" and show it in dialog ###

    def show_progress_bar(self):
        self.LogButton.hide()
        self.progressBar.show()
        self.progressBar.setValue(0)
        
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_progress_bar)
        self.timer.start(25)
        
        ### create the function "update_progress_bar" where do one logic math using python programming logic for build one interval time and runs the progressBar in GUI ###

    def update_progress_bar(self):
        value = self.progressBar.value()
        if value < 100:
            self.progressBar.setValue(value + 10)
        else:
            self.timer.stop()
            self.progressBar.hide()
            self.LogButton.show()
            url = QUrl("https://www.youtube.com")
            QDesktopServices.openUrl(url)
            self.close()

        ### create the function "openYoutube" where the application opens Youtube website in browser ###

    def openYouTube(self):
        url = QUrl("https://www.youtube.com")
        QDesktopServices.openUrl(url)

        ### create the function "openYoutubeLoginPage" where the application opens the Google account authentication id to connect with one Google account and acess easily the Youtube ###

    def openYouTubeLoginPage(self):
        url = QUrl("https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Dpt%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252F%253Fapp%253Ddesktop&hl=pt-BR&ec=65620")
        QDesktopServices.openUrl(url)

### Python's programs Guard Clause ###

if __name__ == "__main__":
    app = QApplication(sys.argv)
    loginScreen = YoutubeLogin()
    loginScreen.setWindowFlags(loginScreen.windowFlags() | Qt.WindowMinimizeButtonHint)
    loginScreen.show()
    sys.exit(app.exec_())


#################### Kevin Moreira ###############################################
